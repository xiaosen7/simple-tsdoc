[
  {
    "name": "B1",
    "annotation": {
      "description": "Shortest name: `B1.B2.B3` Full name: {@link (B1:namespace).(B2:namespace).(B3:namespace)S}",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Namespace"
  },
  {
    "name": "B2",
    "annotation": {
      "tags": [],
      "deprecated": false
    },
    "kind": "Namespace"
  },
  {
    "name": "B3",
    "annotation": {
      "tags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "functionB4",
        "annotation": {
          "description": "Shortest name: `B1.B2.B3.functionB4` Full name: `(B1:namespace).(B2:namespace).(B3:namespace).(functionB4:function)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Function"
      }
    ],
    "kind": "Namespace"
  },
  {
    "name": "ClassA1",
    "annotation": {
      "description": "Shortest name: `ClassA1` Full name: `(ClassA1:class)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "(constructor)",
        "annotation": {
          "description": "Shortest name: `(ClassA1:constructor)` Full name: `(ClassA1:constructor)`\n\nNOTE: \"ClassA1.constructor\" is NOT correct. That would refer to a regular member whose name is \"constructor\".",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Constructor"
      },
      {
        "name": "memberA2",
        "annotation": {
          "description": "Shortest name: `ClassA1.memberA2` Full name: `(ClassA1:class).(memberA2:instance)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      },
      {
        "name": "memberA3",
        "annotation": {
          "description": "Shortest name: `ClassA1.(memberA3:instance)` Full name: `(ClassA1:class).(memberA3:instance)`\n\nNOTE: The shortest name cannot omit \"instance\" because there is a static member with the same name.",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      },
      {
        "name": "memberA3",
        "annotation": {
          "description": "Shortest name: `ClassA1.(memberA3:static)` Full name: `(ClassA1:class).(memberA3:static)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      }
    ],
    "kind": "Class"
  },
  {
    "name": "ClassI1",
    "annotation": {
      "description": "Shortest name: `ClassI1` Full name: `(ClassI1:class)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "title",
        "annotation": {
          "description": "Shortest name: `ClassI1.title` Full name: `(ClassI1:class).(title:instance)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Property"
      }
    ],
    "kind": "Class"
  },
  {
    "name": "ClassJ2",
    "annotation": {
      "description": "Shortest name: `ClassJ2` Full name: `(ClassJ2:class)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "\"𠮷\"",
        "annotation": {
          "description": "Shortest name: `ClassJ2.\"𠮷\"` Full name: `(ClassJ2:class).(\"𠮷\":instance)`\n\nNOTE: In TypeScript some characters require quotes, some do not. TSDoc should follow the same rules as TypeScript in this regard.",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Property"
      },
      {
        "name": "spaß",
        "annotation": {
          "description": "Shortest name: {@link ClassJ2.spaß} Full name: {@link (ClassJ2:class).(spaß:instance)}",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Property"
      },
      {
        "name": "static",
        "annotation": {
          "description": "Shortest name: {@link ClassJ2.static} Also valid: `ClassJ2.\"static\"` Full name: {@link (ClassJ2:class).(static:static)}",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Property"
      }
    ],
    "kind": "Class"
  },
  {
    "name": "ClassM2",
    "annotation": {
      "description": "Shortest name: `ClassM2` Full name: `(ClassM2:class)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "[WellknownSymbolsM1.toNumberPrimitive]",
        "annotation": {
          "description": "Shortest name: `ClassM2.([WellknownSymbolsM1.toNumberPrimitive]:instance)` Full name: `(ClassM2:class).([(WellknownSymbolsM1:namespace).(toNumberPrimitive:variable)]:instance)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      },
      {
        "name": "[WellknownSymbolsM1.toNumberPrimitive]",
        "annotation": {
          "description": "Shortest name: `ClassM2.([WellknownSymbolsM1.toNumberPrimitive]:static)` Full name: `(ClassM2:class).([(WellknownSymbolsM1:namespace).(toNumberPrimitive:variable)]:static)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      },
      {
        "name": "[WellknownSymbolsM1.toStringPrimitive]",
        "annotation": {
          "description": "Shortest name: `ClassM2.[WellknownSymbolsM1.toStringPrimitive]` Full name: `(ClassM2:class).([(WellknownSymbolsM1:namespace).(toStringPrimitive:variable)]:instance)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      }
    ],
    "kind": "Class"
  },
  {
    "name": "functionC1",
    "annotation": {
      "description": "Shortest name: `(functionC1:1)` Full name: `(functionC1:1)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "functionC1",
    "annotation": {
      "description": "Shortest name: `(functionC1:2)` Full name: `(functionC1:2)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "functionC1",
    "annotation": {
      "tags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "functionD1",
    "annotation": {
      "description": "Shortest name: `(functionD1:WITH_NUMBERS)` Full name: `(functionD1:WITH_NUMBERS)`\n\n{@label WITH_NUMBERS}",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "functionD1",
    "annotation": {
      "description": "Shortest name: `(functionD1:WITH_LETTERS)` Full name: `(functionD1:WITH_LETTERS)`\n\n{@label WITH_LETTERS}",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "functionD1",
    "annotation": {
      "description": "Shortest name: `(functionD1:3)` Full name: `(functionD1:3)`\n\nNOTE: If one label is omitted, the numeric indexers can still be used.",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "functionD1",
    "annotation": {
      "tags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "MergedE1",
    "annotation": {
      "description": "Shortest name: `(MergedE1:class)` Full name: `(MergedE1:class)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "(constructor)",
        "annotation": {
          "description": "Shortest name: `(MergedE1:constructor)` Full name: `(MergedE1:constructor)`\n\nNOTE: MergedE1 is also a namespace, so it seems like we need a syntax like `(MergedE1:class,constructor)` or `(MergedE1:class:constructor)`. But only one selector is necessary because namespaces conveniently cannot have constructors.",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Constructor"
      },
      {
        "name": "memberE2",
        "annotation": {
          "description": "Shortest name: `(MergedE1:class).memberE2` Full name: `(MergedE1:class).(memberE2:instance)`\n\nNOTES:\n\n- The \"instance\" selector is optional because \"(MergedE1:class)\" already eliminates any ambiguity.\n\n- Although \"MergedE1.(memberE2:instance)\" is theoretically also an unambiguous notation, the TSDoc standard discourages that, because resolving it might require unbounded backtracking.",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Method"
      }
    ],
    "kind": "Class"
  },
  {
    "name": "MergedE1",
    "annotation": {
      "description": "Shortest name: `(MergedE1:namespace)` Full name: `(MergedE1:namespace)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "properties": [
      {
        "name": "memberE2",
        "annotation": {
          "description": "Shortest name: `(MergedE1:namespace).memberE2` Full name: `(MergedE1:namespace).(memberE2:function)`",
          "params": [],
          "tags": [],
          "modifierTags": [],
          "deprecated": false
        },
        "kind": "Function"
      }
    ],
    "kind": "Namespace"
  },
  {
    "name": "MergedF1",
    "annotation": {
      "description": "Shortest name: `(MergedF1:WITH_NUMBERS)` Full name: `(MergedF1:WITH_NUMBERS)`\n\n{@label WITH_NUMBERS}",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "MergedF1",
    "annotation": {
      "description": "Shortest name: `(MergedF1:2)` Full name: `(MergedF1:2)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "MergedF1",
    "annotation": {
      "tags": [],
      "deprecated": false
    },
    "kind": "Function"
  },
  {
    "name": "MergedF1",
    "annotation": {
      "description": "Shortest name: `(MergedF1:namespace)` Full name: `(MergedF1:namespace)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Namespace"
  },
  {
    "name": "MergedG1",
    "annotation": {
      "description": "Shortest name: `(MergedG1:namespace)` Full name: `(MergedG1:namespace)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Namespace"
  },
  {
    "name": "WellknownSymbolsM1",
    "annotation": {
      "description": "Shortest name: `WellknownSymbolsM1` Full name: `(WellknownSymbolsM1:namespace)`",
      "params": [],
      "tags": [],
      "modifierTags": [],
      "deprecated": false
    },
    "kind": "Namespace"
  }
]